name: 🔍 Code Quality & Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: '20.x'

jobs:
  # Security scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Dependency analysis
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: critical
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Code quality analysis
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Run linter
        run: npm run lint
        continue-on-error: true

      - name: 🔧 Type checking
        run: npm run type-check
        continue-on-error: true

      - name: 📊 Analyze bundle size
        run: |
          npm run build
          echo "## 📊 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Build Output:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          du -sh out/* | sort -hr >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "### File Count by Type:" >> $GITHUB_STEP_SUMMARY
          echo "- **HTML Files:** $(find out -name "*.html" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **JavaScript Files:** $(find out -name "*.js" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **CSS Files:** $(find out -name "*.css" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Files:** $(find out -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "*.ico" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Files:** $(find out -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Performance audit
  lighthouse:
    name: 🚨 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Serve application
        run: |
          npx serve out -p 3000 &
          sleep 5
        
      - name: 🚨 Run Lighthouse
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: 'http://localhost:3000'
          configPath: './.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notify results
  quality-summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    needs: [security, code-quality]
    if: always()
    steps:
      - name: 📊 Create quality summary
        run: |
          echo "## 🔍 Code Quality & Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security Scan:** Failed - Check security tab for details" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ **Code Quality:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality:** Failed - Check workflow logs" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
